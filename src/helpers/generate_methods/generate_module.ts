import * as vscode from 'vscode';
import path = require('path');
import fs = require("fs");
import { getFormattedStructName } from '../format_struct_name';
import { rootFolderPath, errorHandler, findPath } from '../utils';
import { moduleBody } from '../file_contents/module_file';
import { presentationExports } from '../file_contents/presentation_file';
import { usecaseBody, usecaseExports } from '../file_contents/usecase_file';
import { repositoryBody, repositoryExports } from '../file_contents/repository_file';
import { repositoryImpBody, repositoryImpExports } from '../file_contents/repository_imp_file';
import { remoteBody, remoteExports } from '../file_contents/remote_file';
import { pagesBody, pagesExports } from '../file_contents/pages_file';
import { modelBody, modelExports } from '../file_contents/model_file';
import { entityBody, entityExports } from '../file_contents/entity_file';
import { domainExports } from '../file_contents/domain_file';
import { datasourceBody, datasourceExports } from '../file_contents/datasource_file';
import { dataExports } from '../file_contents/data_file';
import { controllerBody, controllerExports } from '../file_contents/controllers_file';

export let generateModule = vscode.commands.registerCommand('flutter-clean-arch.create.module', async () => {
	let folderPath = await vscode.window.showInputBox({ prompt: "Folder Path", value: path.join(`${rootFolderPath}`) });
	let structName = await vscode.window.showInputBox({ prompt: "Structure Name (type it in cammel case)" });
	let className = '';
	let variableClassName = '';
	const result = getFormattedStructName(structName?.split('_') ?? []);
	className = result[0];
	variableClassName = result[1];

	let moduleFolder = findPath(folderPath ?? '', variableClassName);
	let moduleIndex = path.join(moduleFolder, `${variableClassName}_module.dart`);
	let presentationFolder = findPath(moduleFolder ?? '', 'presentation');
	let presentationExportsPath = path.join(presentationFolder, `presentation_exports.dart`);
	let dataFolder = findPath(moduleFolder ?? '', 'data');
	let dataExportsPath = path.join(dataFolder, `data_exports.dart`);
	let domainFolder = findPath(moduleFolder ?? '', 'domain');
	let domainExportsPath = path.join(domainFolder, `domain_exports.dart`);
	let datasourceFolder = findPath(dataFolder ?? '', 'datasource');
	let datasourceIndexFile = path.join(datasourceFolder, `${structName}_datasource.dart`);
	let datasourceExportsPath = path.join(datasourceFolder, `datasource_exports.dart`);
	let modelsFolder = findPath(dataFolder ?? '', 'models');
	let modelsIndexFile = path.join(modelsFolder, `${structName}_model.dart`);
	let modelExportsPath = path.join(modelsFolder, `models_exports.dart`);
	let repositoriesImpFolder = findPath(dataFolder ?? '', 'repositories');
	let repositoriesImpIndexFile = path.join(repositoriesImpFolder, `${structName}_repository_imp.dart`);
	let repositoryImpExportsPath = path.join(repositoriesImpFolder, `repositories_exports.dart`);
	let remoteFolder = findPath(datasourceFolder ?? '', 'remote');
	let remoteIndexFile = path.join(remoteFolder, `${structName}_datasource_imp.dart`);
	let remoteExportsPath = path.join(remoteFolder, `remote_exports.dart`);

	let entitiesFolder = findPath(domainFolder ?? '', 'entities');
	let entitiesIndexFile = path.join(entitiesFolder, `${structName}_entity.dart`);
	let entityExportsPath = path.join(entitiesFolder, `entities_exports.dart`);
	let repositoryFolder = findPath(domainFolder ?? '', 'repositories');
	let repositoryIndexFile = path.join(repositoryFolder, `${structName}_repository.dart`);
	let repositoryExportsPath = path.join(repositoryFolder, `repositories_exports.dart`);
	let useCasesFolder = findPath(domainFolder ?? '', 'usecases');
	let useCasesIndexFile = path.join(useCasesFolder, `${structName}_usecase.dart`);
	let useCaseExports = path.join(useCasesFolder, `usecases_exports.dart`);

	let pagesFolder = findPath(presentationFolder ?? '', 'pages');
	let pagesIndexFile = path.join(pagesFolder, `${structName}_page.dart`);
	let pagesExportsPath = path.join(pagesFolder, `pages_exports.dart`);
	let controllersFolder = findPath(presentationFolder ?? '', 'controllers');
	let controllersIndexFile = path.join(controllersFolder, `${structName}_controller.dart`);
	let controllersExportsPath = path.join(controllersFolder, `controllers_exports.dart`);

	fs.writeFile(controllersIndexFile, controllerBody(className), errorHandler);
	fs.writeFile(controllersExportsPath, controllerExports(structName ?? ''), errorHandler);
	fs.writeFile(dataExportsPath, dataExports(), errorHandler);
	fs.writeFile(datasourceIndexFile, datasourceBody(className), errorHandler);
	fs.writeFile(datasourceExportsPath, datasourceExports(structName ?? ''), errorHandler);
	fs.writeFile(domainExportsPath, domainExports(), errorHandler);
	fs.writeFile(entitiesIndexFile, entityBody(className), errorHandler);
	fs.writeFile(entityExportsPath, entityExports(structName ?? ''), errorHandler);
	fs.writeFile(modelsIndexFile, modelBody(className), errorHandler);
	fs.writeFile(modelExportsPath, modelExports(structName ?? ''), errorHandler);
	fs.writeFile(pagesIndexFile, pagesBody(className), errorHandler);
	fs.writeFile(pagesExportsPath, pagesExports(structName ?? ''), errorHandler);
	fs.writeFile(remoteIndexFile, remoteBody(className), errorHandler);
	fs.writeFile(remoteExportsPath, remoteExports(structName ?? ''), errorHandler);
	fs.writeFile(repositoriesImpIndexFile, repositoryImpBody(className), errorHandler);
	fs.writeFile(repositoryImpExportsPath, repositoryImpExports(structName ?? ''), errorHandler);
	fs.writeFile(repositoryIndexFile, repositoryBody(className), errorHandler);
	fs.writeFile(repositoryExportsPath, repositoryExports(structName ?? ''), errorHandler);
	fs.writeFile(useCasesIndexFile, usecaseBody(className, variableClassName), errorHandler);
	fs.writeFile(useCaseExports, usecaseExports(structName ?? ''), errorHandler);
	fs.writeFile(moduleIndex, moduleBody(className, variableClassName), errorHandler);
	fs.writeFile(presentationExportsPath, presentationExports(), errorHandler);
});